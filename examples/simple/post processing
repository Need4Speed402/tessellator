<html>
    <body style="margin:0px">
        <canvas style="width:100%;height:100%" id="gl"></canvas>
    </body>
    
    <script src="Tessellator.js"></script>
    
    <script>
        var tessellator = new Tessellator("gl");
        
        var rotation = Tessellator.float();
        var rotationTween = rotation.createTween();
        rotationTween.dir(Math.PI / 1000);
        
        var axis = Tessellator.vec3(0, 1, 0);
        var axisTween = axis.createTween();
        axisTween.dir(Tessellator.vec3(0.6, 0.4, 1));
        
        
        var model = tessellator.createModel();
        model.clear("black");
        model.setView(new Tessellator.PerspectiveView());
        
        model.enable(Tessellator.LIGHTING);
        model.setPointLight(0, 0, 0);
        
        model.setColor("blue");
        model.setDirectionalLight(1, 1, 1);
        
        model.translate(0, 0, -6);
        model.rotate(rotation, axis);
        
        model.setColor("white");
        model.fillCube(0, 0, 0, 1);
        model.finish();
        
        //this is a tutoral on renderers in Tessellator and how
        //they work.
        
        //here is a basic ModelRenderer that renders models.
        //the most versitile renderer. The one most will use.
        //There are also other renderers, such as the BufferedRenderer
        //this will buffer the output of the passed renderer and then
        //render the model as a full screen quad.
        
        //Usage example: var renderer = new Tessellator.BufferedRenderer(new Tessellator.ModelRenderer());
        
        //this is our standard ModelRenderer and we are going to do some post procesing with the buffered renderer
        var modelRenderer = new Tessellator.ModelRenderer(model);
        
        //intorduction: shaders
        //the tessellator comes with a lot of useful shaders so we are going to use those
        //there is a shader called Tessellator.PIXEL_SHADER_NOISE and we are going to add noise to the scene
        
        var renderer = new Tessellator.BufferedRenderer(Tessellator.PIXEL_SHADER_NOISE, modelRenderer);
        
        //we have just creating a buffered renderer and passing it a custom pixel shader
        //there is one more thing we have to do: we need to set the amount of noise we want
        //the shader we used uses uniforms for this. We can edit uniforms by setting a uniform setter
        
        renderer.setUniformSetter(function (matrix){
            //this matrix object is a low level tracker objects that makes sure the state of 
            //webgl is okay.
            
            //the uniform we are concerned with is called 'intensity' set this to 0.1.
            // a higher number means more noise
            matrix.set("intensity", 0.1);
        });
        
        var renderLoop = new Tessellator.RenderLoop(renderer);
    </script>
</html>
